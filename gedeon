import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def lenschow_model_with_gedeon(z, zi, w_star, Wx, Wy, xc=0, yc=0, u=0, v=0):
    """
    Bencatel 모델을 고려한 Lenschow 모델 (Gedeon)을 사용하여 주어진 고도에서의 상승기류 속도를 계산합니다.

    Args:
        z: 고도 (m)
        zi: 대류 혼합층 두께 (m)
        w_star: 대류 속도 스케일 (m/s)
        Wx: x 방향 수평 바람 속도 (m/s)
        Wy: y 방향 수평 바람 속도 (m/s)
        xc: 지표면에서 상승기류 중심의 x 좌표 (m)
        yc: 지표면에서 상승기류 중심의 y 좌표 (m)
        u: 지표면에서 상승기류 중심의 x 방향 이동 속도 (m/s)
        v: 지표면에서 상승기류 중심의 y 방향 이동 속도 (m/s)

    Returns:
        X: x 좌표 배열 (m)
        Y: y 좌표 배열 (m)
        w: 상승기류 속도 배열 (m/s)
    """

    # 상승기류 외곽 반지름 계산
    d = zi * (0.16 * (z / zi)**(1/3)) * (1 - (0.25 * z)/zi)

    # 평균 상승기류 속도 계산 (Lenschow 방정식)
    w_core = 1.0 * (z / zi)**(1/3) * (1 - 1.1 * z / zi) * w_star    

    # Bencatel 모델 적용: 상승기류 중심선 위치 계산
    xt = xc + (Wx - u) * z / w_core
    yt = yc + (Wy - v) * z / w_core

    # 2D 좌표 배열 생성
    num = 100
    x = np.linspace(xt - d, xt + d, num)
    y = np.linspace(yt - d, yt + d, num)
    X, Y = np.meshgrid(x, y)

    # 상승기류 중심에서의 거리 계산
    r = np.sqrt((X - xt)**2 + (Y - yt)**2)

    w = w_core * np.exp(- (r/(d/2))**2) * (1 -(r/(d/2))**2)

    return X, Y, r, w, xt, yt

##########################################################################################

# 매개변수 설정
zi = 1000           # 대류 혼합층 두께 [m]
w_star = 2          # 대류 속도 스케일 [m/s]
Wx = -1              # x 방향 수평 바람 속도 [m/s]
Wy = -0.5            # y 방향 수평 바람 속도 [m/s]

##########################################################################################
# 1. 특정 고도에서의 3D Surface Plot
z = 800  # 고도 [m]

# Bencatel 모델을 고려한 Allen 모델 계산
X, Y, R, w_total, xt, yt = lenschow_model_with_gedeon(z, zi, w_star, Wx, Wy)

# 3D 서피스 플롯 생성
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
surf = ax.plot_surface(X, Y, w_total, cmap='jet')
fig.colorbar(surf, label="Updraft Velocity (m/s)")
ax.set_xlabel("X (m)")
ax.set_ylabel("Y (m)")
ax.set_zlabel("Updraft Velocity (m/s)")
plt.title("Allen Model with Bencatel (z = 800 m)")
plt.show()

############################################################################################
# 2. 여러 고도에서 상승기류 속도 계산
altitudes = [200, 400, 600, 800]  # 고도 (m)
for z in altitudes:
    X, Y, R, w_total, xt, yt = lenschow_model_with_gedeon(z, zi, w_star, Wx, Wy)
    plt.plot(R, w_total, label=f"Altitude = {z} m")

# 그래프 설정
plt.xlabel("Distance from Thermal Center (m)")
plt.ylabel("Updraft Velocity (m/s)")
plt.title("Allen Updraft Model")
plt.grid(True)
plt.show()

############################################################################################
# 여러 고도에서 중심점의 위치 변화 (leaning 확인)

fig = plt.figure()
ax = fig.add_subplot(projection='3d')

altitudes = np.linspace(1, zi, 50)
for z in altitudes:
    X, Y, R, w_total, xt, yt = lenschow_model_with_gedeon(z, zi, w_star, Wx, Wy)
    ax.scatter(xt, yt, z, label=f"Altitude = {z} m")

# 그래프 설정
ax.set_xlabel("x (m)")
ax.set_ylabel("y (m)")
ax.set_zlabel("z (m)")
plt.title("center position of thermal with altitudes")
plt.grid(True)
plt.show()
